// Mocks generated by Mockito 5.4.6 from annotations
// in task_6/test/features/product/presentation/bloc/product_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_6/core/error/failures.dart' as _i6;
import 'package:task_6/features/product/domain/entities/product.dart' as _i7;
import 'package:task_6/features/product/domain/repositories/product_repository.dart'
    as _i2;
import 'package:task_6/features/product/domain/usecases/create_product_usecase.dart'
    as _i9;
import 'package:task_6/features/product/domain/usecases/delete_product_usecase.dart'
    as _i11;
import 'package:task_6/features/product/domain/usecases/update_product_usecase.dart'
    as _i10;
import 'package:task_6/features/product/domain/usecases/view_All_products_usecase.dart'
    as _i4;
import 'package:task_6/features/product/domain/usecases/view_product_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductRepository_0 extends _i1.SmartFake
    implements _i2.ProductRepository {
  _FakeProductRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ViewAllProductsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewAllProductsUseCase extends _i1.Mock
    implements _i4.ViewAllProductsUseCase {
  MockViewAllProductsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i7.Product>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>>);
}

/// A class which mocks [ViewProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewProductUseCase extends _i1.Mock
    implements _i8.ViewProductUseCase {
  MockViewProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Product>> call(String? productId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [productId]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Product>>.value(
              _FakeEither_1<_i6.Failure, _i7.Product>(
                this,
                Invocation.method(#call, [productId]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Product>>);
}

/// A class which mocks [CreateProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProductUseCase extends _i1.Mock
    implements _i9.CreateProductUseCase {
  MockCreateProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i7.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#call, [product]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [product]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductUseCase extends _i1.Mock
    implements _i10.UpdateProductUseCase {
  MockUpdateProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i7.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#call, [product]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [product]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductUseCase extends _i1.Mock
    implements _i11.DeleteProductUseCase {
  MockDeleteProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(String? productId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [productId]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [productId]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}
